{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/ContactForm/ContactForm.module.css","components/FIlter/Filter.module.css","redux/actions.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/FIlter/Filter.js","components/ContactList/ContactList.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","dispatch","a","get","data","name","number","id","contact","post","then","catch","error","contactId","delete","getFilter","state","filter","getAllContacts","items","getTotalContactsCount","length","getVisibleContacts","createSelector","contacts","toLowerCase","includes","trim","ContactForm","useState","setName","setNumber","useSelector","useDispatch","handleChange","e","currentTarget","value","resetForm","onSubmit","preventDefault","addNewContact","find","alert","operations","className","s","formInput","type","pattern","title","required","onChange","Filter","label","input","ContactList","visibleContacts","useEffect","contactList","map","item","text","onClick","App","container","createReducer","_","payload","loading","action","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce58cfcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__TGQVJ\",\"text\":\"ContactList_text__fMHaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__HrLdy\",\"title\":\"App_title__3qg4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"ContactForm_formInput__3aT0U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1AVS2\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const getContactsRequest = createAction('contacts/getContactsRequest');\nexport const getContactsSuccess = createAction('contacts/getContactsSuccess');\nexport const getContactsError = createAction('contacts/getContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContact = createAction('contacts/filterContact');\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n} from './actions';\n\naxios.defaults.baseURL = 'https://618a9d5f34b4f400177c47c6.mockapi.io/api/v1';\n\nconst getContacts = () => async dispatch => {\n  dispatch(getContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(getContactsSuccess(data));\n  } catch (error) {\n    dispatch(getContactsError(error));\n  }\n\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(getContactsSuccess(data)))\n  //   .catch(error => dispatch(getContactsError(error)));\n};\n\nconst addContact = (name, number, id) => dispatch => {\n  const contact = {\n    name,\n    number,\n    id,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\n// export const getLoading = state => state.loading;\n\nexport const getFilter = state => state.filter;\n\nexport const getAllContacts = state => state.items;\n\nexport const getTotalContactsCount = state => {\n  const contacts = getAllContacts(state);\n\n  return contacts.length;\n};\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n        number.includes(filter.trim()),\n    );\n  },\n);\n","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport operations from '../../redux/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const addNewContact = {\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() ||\n          contact.number === number,\n      )\n    )\n      return alert(`${name} witn ${number} is already in Contacts`);\n\n    dispatch(operations.addContact(addNewContact));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name{' '}\n        <input\n          className={s.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number{' '}\n        <input\n          className={s.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contact by name/number\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(filterContact(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n\nexport { Filter };\n","import React, { useEffect } from 'react';\nimport s from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport { getVisibleContacts } from '../../redux/selectors';\n\nfunction ContactList() {\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.getContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={s.contactList}>\n      {visibleContacts.map(({ name, number, id }) => (\n        <li key={id} className={s.item}>\n          <span className={s.text}>{name}</span>\n          <span className={s.text}>{number}</span>\n          <button\n            type=\"button\"\n            onClick={() => dispatch(operations.deleteContact(id))}\n          >\n            Удалить\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport { ContactList };\n","import ContactForm from './components/ContactForm/ContactForm';\nimport { Filter } from './components/FIlter/Filter';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { getTotalContactsCount } from './redux/selectors';\nimport s from './App.module.css';\n\nexport default function App() {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      <span> Total contacts: {getTotalContactsCount}</span>\n\n      <ContactForm />\n\n      <h2 className={s.title}>Contacts</h2>\n\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContact,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n} from './actions';\n\nconst items = createReducer([], {\n  [getContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [getContactsRequest]: () => true,\n  [getContactsSuccess]: () => false,\n  [getContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [filterContact]: (_, action) => action.payload,\n});\n\nconst error = createReducer(null, {});\n\nconst rootReducer = combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n// };\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: true,\n  // devTools: process.env.NODE_ENV === 'development',\n});\n// const persistor = persistStore(store);\n// const obj = { store, persistor };\n// export default obj;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={data.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}