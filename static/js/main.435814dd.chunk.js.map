{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/services/api.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","redux/actions.js","components/Filter/Filter.js","components/Loader/Loader.js","components/ContactList/ContactList.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","getContacts","a","axios","get","response","data","defaults","baseURL","addContact","value","post","deleteContact","contactId","delete","createAsyncThunk","_","rejectWithValue","ContactsAPI","contacts","newContact","getLoading","state","loading","getFilter","filter","getAllContacts","items","getTotalContactsCount","length","getVisibleContacts","createSelector","name","number","toLowerCase","includes","trim","ContactForm","useState","setName","setNumber","useSelector","total","dispatch","useDispatch","handleChange","e","currentTarget","resetForm","console","log","onSubmit","preventDefault","addNewContact","find","contact","alert","operations","className","s","formInput","type","pattern","title","required","onChange","createAction","filterContact","Filter","label","input","Loader","color","height","width","timeout","ContactList","visibleContacts","useEffect","contactList","map","id","item","text","onClick","App","container","createReducer","fulfilled","payload","pending","rejected","action","error","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.435814dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__TGQVJ\",\"text\":\"ContactList_text__fMHaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__HrLdy\",\"title\":\"App_title__3qg4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"ContactForm_formInput__3aT0U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2xV-G\"};","import axios from 'axios';\n\n// const API_KEY = '22c199c70cf21c77ac06b5d74d444545';\n// const language = 'en-US';\naxios.defaults.baseURL = 'https://618a9d5f34b4f400177c47c6.mockapi.io/api/v1';\n\nexport async function getContacts() {\n  const response = await axios.get(`/contacts`);\n  return await response.data;\n}\n\nexport const addContact = async value => {\n  const { data } = await axios.post('/contacts', value);\n  return data;\n};\n\nexport const deleteContact = async contactId => {\n  await axios.delete(`/contacts/${contactId}`);\n  return contactId;\n};\n","// import axios from 'axios';\n// import {\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n//   getContactsRequest,\n//   getContactsSuccess,\n//   getContactsError,\n// } from './actions';\n\n// axios.defaults.baseURL = 'https://618a9d5f34b4f400177c47c6.mockapi.io/api/v1';\n\n// const getContacts = () => async dispatch => {\n//   dispatch(getContactsRequest());\n\n//   try {\n//     const { data } = await axios.get('/contacts');\n\n//     dispatch(getContactsSuccess(data));\n//   } catch (error) {\n//     dispatch(getContactsError(error));\n//   }\n\n//   // axios\n//   //   .get('/contacts')\n//   //   .then(({ data }) => dispatch(getContactsSuccess(data)))\n//   //   .catch(error => dispatch(getContactsError(error)));\n// };\n\n// const addContact =\n//   ({ name, number }) =>\n//   dispatch => {\n//     const contact = {\n//       name,\n//       number,\n//     };\n\n//     dispatch(addContactRequest());\n\n//     axios\n//       .post('/contacts', contact)\n//       .then(({ data }) => dispatch(addContactSuccess(data)))\n//       .catch(error => dispatch(addContactError(error)));\n//   };\n\n// const deleteContact = contactId => dispatch => {\n//   dispatch(deleteContactRequest());\n\n//   axios\n//     .delete(`/contacts/${contactId}`)\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\n//     .catch(error => dispatch(deleteContactError(error)));\n// };\n\n// // eslint-disable-next-line import/no-anonymous-default-export\n// export default {\n//   getContacts,\n//   addContact,\n//   deleteContact,\n// };\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as ContactsAPI from '../components/services/api';\n\nconst getContacts = createAsyncThunk(\n  'contacts/getContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const contacts = await ContactsAPI.getContacts();\n      return contacts;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nconst addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (newContact, { rejectWithValue }) => {\n    try {\n      const contacts = await ContactsAPI.addContact(newContact);\n      return contacts;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nconst deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const contacts = await ContactsAPI.deleteContact(contactId);\n      return contacts;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.loading;\n\nexport const getFilter = state => state.filter;\n\nexport const getAllContacts = state => state.items;\n\nexport const getTotalContactsCount = state => {\n  const contacts = getAllContacts(state);\n\n  return contacts.length;\n};\n\n//мемоизация//\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n        number.includes(filter.trim()),\n    );\n  },\n);\n","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport operations from '../../redux/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts, getTotalContactsCount } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getAllContacts);\n  const total = useSelector(getTotalContactsCount);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const addNewContact = {\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() ||\n          contact.number === number,\n      )\n    )\n      return alert(`${name} witn ${number} is already in Contacts`);\n\n    dispatch(operations.addContact(addNewContact));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  console.log(contacts);\n\n  return (\n    <>\n      <span> Total contacts:{total}</span>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name{' '}\n          <input\n            className={s.formInput}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Number{' '}\n          <input\n            className={s.formInput}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  );\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const getContactsRequest = createAction('contacts/getContactsRequest');\nexport const getContactsSuccess = createAction('contacts/getContactsSuccess');\nexport const getContactsError = createAction('contacts/getContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContact = createAction('contacts/filterContact');\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\n\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contact by name/number\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(filterContact(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n\nexport { Filter };\n","import NewLoader from 'react-loader-spinner';\n\nfunction Loader() {\n  return (\n    <div className=\"loader\">\n      <NewLoader\n        type=\"ThreeDots\"\n        color=\"#3f51b5\"\n        height={80}\n        width={80}\n        timeout={3000} //3 secs\n      />\n    </div>\n  );\n}\n\nexport { Loader };\n","import React, { useEffect } from 'react';\nimport s from './ContactList.module.css';\nimport { Loader } from '../Loader/Loader';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport { getVisibleContacts, getLoading } from '../../redux/selectors';\n\nfunction ContactList() {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const loading = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      <ul className={s.contactList}>\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id} className={s.item}>\n            <span className={s.text}>{name}</span>\n            <span className={s.text}>{number}</span>\n            <button\n              type=\"button\"\n              onClick={() => dispatch(operations.deleteContact(id))}\n            >\n              Удалить\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport { ContactList };\n","import ContactForm from './components/ContactForm/ContactForm';\nimport { Filter } from './components/Filter/Filter';\nimport { ContactList } from './components/ContactList/ContactList';\nimport s from './App.module.css';\n\nexport default function App() {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n\n      <ContactForm />\n      <h2 className={s.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","// import { combineReducers, createReducer } from '@reduxjs/toolkit';\n// import {\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n//   filterContact,\n//   getContactsRequest,\n//   getContactsSuccess,\n//   getContactsError,\n// } from './actions';\n\n// const items = createReducer([], {\n//   [getContactsSuccess]: (_, { payload }) => payload,\n//   [addContactSuccess]: (state, { payload }) => [...state, payload],\n//   [deleteContactSuccess]: (state, { payload }) =>\n//     state.filter(({ id }) => id !== payload),\n// });\n\n// const loading = createReducer(false, {\n//   [getContactsRequest]: () => true,\n//   [getContactsSuccess]: () => false,\n//   [getContactsError]: () => false,\n//   [addContactRequest]: () => true,\n//   [addContactSuccess]: () => false,\n//   [addContactError]: () => false,\n//   [deleteContactRequest]: () => true,\n//   [deleteContactSuccess]: () => false,\n//   [deleteContactError]: () => false,\n// });\n\n// const filter = createReducer('', {\n//   [filterContact]: (_, action) => action.payload,\n// });\n\n// const error = createReducer(null, {});\n\n// const rootReducer = combineReducers({\n//   items,\n//   filter,\n//   loading,\n//   error,\n// });\n\n// export default rootReducer;\n\nimport { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport operations from './operations';\nimport { filterContact } from './actions';\n\nconst items = createReducer([], {\n  [operations.getContacts.fulfilled]: (_, { payload }) => payload,\n  [operations.addContact.fulfilled]: (state, { payload }) => [\n    ...state,\n    payload,\n  ],\n  [operations.deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [operations.getContacts.pending]: () => true,\n  [operations.getContacts.fulfilled]: () => false,\n  [operations.getContacts.rejected]: () => false,\n  [operations.addContact.pending]: () => true,\n  [operations.addContact.fulfilled]: () => false,\n  [operations.addContact.rejected]: () => false,\n  [operations.deleteContact.pending]: () => true,\n  [operations.deleteContact.fulfilled]: () => false,\n  [operations.deleteContact.rejected]: () => false,\n});\n\nconst filter = createReducer('', {\n  [filterContact]: (_, action) => action.payload,\n});\n\nconst error = createReducer(null, {\n  [operations.getContacts.rejected]: (_, action) => action.payload,\n  [operations.getContacts.pending]: () => null,\n});\n\nconst rootReducer = combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n// };\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: true,\n  // devTools: process.env.NODE_ENV === 'development',\n});\n// const persistor = persistStore(store);\n// const obj = { store, persistor };\n// export default obj;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={data.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}